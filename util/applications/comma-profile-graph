#!/bin/bash

# This file is part of comma, a generic and flexible library
# Copyright (c) 2014 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

basename=$( basename $0 )

function usage
{
    cat >&2 <<EOF

Usage: $basename [options]

Generate graphviz visualisation of profile data

Options:

    --strict-size: size the nodes strictly
    --scale-edges: scale edges rather than nodes

    If --strict-size is not used then the nodes will size to the minimum
    of their ideal size and the size required to contain the text.
    In other words they'll sometimes be too large.

Input:

    Input is expected to be of the form:

    ...
    func_a/func_b/func_c/elapsed=1.0
    func_a/func_b/elapsed=1.5
    func_a/func_d/elapsed=0.5
    func_a/elapsed=2.5
    ...

    Where func_b, func_c and func_d are instrumented by using comma_progress()
    within the caller. e.g. within func_a the call to func_b and func_d would
    be:

    comma_progress <progress_csv> func_b
    comma_progress <progress_csv> func_d

    where <progress_csv> is the path to the progress.csv file.

    comma-test-run will generate progress.csv and elapsed.csv, from which the
    required input is created with one of:

    cat progress.csv | comma-progress --elapsed | comma-progress --sum
    cat elapsed.csv | comma-progress --sum

Examples:

    The output can most usefully be piped into dot. The optimum format for
    dot is svg or svgz.

    cat sum.csv | $basename | dot -Tsvg > profile.svg
    cat sum.csv | $basename --strict-size | dot -Tsvg > profile.svg
    cat sum.csv | $basename --scale-edges | dot -Tsvg > profile.svg

EOF
    exit
}

scaled_object=node

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        --scale-edges)
            scaled_object=edge
            ;;
        --strict-size)
            strict_size=1
            ;;
        -*)
            echo "$name: unrecognized option '$1'" >&2
            exit 1
            ;;
    esac
    shift
done

function nodename { echo $1 | tr '.-' '_'; }

input_tmp=$( cat )

declare -A sums

# This slightly cryptic setting of "sums" is because piped commands run in sub-shells
# so if we did "cat ... | comma... | sed ... | while ..." the variable wouldn't be
# set it the main shell.
#
# We also can't do: sums=( $( cat / comma / sed ) ) because only a literal can be
# inside the parentheses. You could use "eval", but you probably don't want to do that.

while read line; do
    key=$( echo $line | cut -f1 -d= )
    value=$( echo $line | cut -f2 -d= )
    # Put the value from comma-progress in the same format as the original -
    # three decimal places and no trailing 0's
    sums[$key]=$( printf "%0.3f" $value | sed -r 's/(\.[0-9]*[1-9])0*$/\1/' )
done < <( echo "$input_tmp" | comma-progress --sum \
             | sed -r -e 's#^#/#' -e "s#^.*/(.*)/elapsed=\"(.*)\"#\1=\2#" )

nodes_done=""

# fixedsize=shape should keep the circle at the proscribed size but use the
# larger of the circle and the text for determining layout.
# However it doesn't seem to actually work so we'll use "false" instead
# unless told otherwise.
fixedsize_option=false
[[ $strict_size ]] && fixedsize_option=true

echo "digraph callgraph {"

echo "$input_tmp" | while read line || [[ -n $line ]]; do
    elapsed=$( echo $line | cut -f2 -d= | sed 's/"//g' )
    pair=$( echo $line | sed "s!/elapsed=.*!!" | rev | cut -f1,2 -d/ | rev )
    target=$( echo $pair | cut -f2 -d/ )

    # If sums doesn't exist: value=elapsed
    # If sums exists and is the same as elapsed: value=elapsed
    # If sums exists and is different to elapsed: value=sums and show elapsed on edge
    value=$elapsed
    unset show_elapsed
    if [[ ${sums[$target]} ]]; then
        (( $( echo "${sums[$target]} == $elapsed" | bc ) )) || {
            value=${sums[$target]}
            show_elapsed=1
        }
    fi

    size=$( echo "sqrt( $value )" | sed 's/e/ * 10^/g' | bc )
    [[ $target == "run_all" ]] && size=1
    fontsize=$( echo "$size * 10" | bc )
    node_value_label="${value}s"
    edge_value_label="${value}s"
    [[ $show_elapsed ]] && edge_value_label="${elapsed}s"

    if ! echo $nodes_done | grep -q "\b$target\b"; then
        [[ $scaled_object == "node" ]] && node_size_field="fixedsize=$fixedsize_option width=$size fontsize=$fontsize"
        echo -e "\t$( nodename $target ) [label=\"$target\\\n($node_value_label)\" shape=circle $node_size_field ]"
        nodes_done+=" $target"
    fi

    if echo $pair | grep -q '/'; then
        relationship=$( nodename $pair | sed 's!/! -> !' )
        unset edge_attributes
        [[ $show_elapsed ]] && edge_attributes="label=\"$edge_value_label\" fontsize=$fontsize"
        [[ $scaled_object == "edge" ]] && edge_attributes+=" penwidth=$size"
        [[ $edge_attributes ]] && edge_attributes="[${edge_attributes}]"
        echo -e "\t$relationship $edge_attributes"
    fi
done

echo "}"
