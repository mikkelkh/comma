#!/bin/bash

if [[ '--operate-as-child' == "$1" ]] ; then
    declare -i work=1
    
    function child_trap() { trap '' SIGPIPE SIGHUP SIGTERM SIGINT SIGQUIT SIGSEGV SIGUSR1 ; echo 'child/end/trap=1' ; work=0 ; }

    echo 'child/start=1'
    trap 'child_trap' SIGPIPE SIGHUP SIGTERM SIGINT SIGQUIT SIGSEGV SIGUSR1 # EXIT

    declare -i count=0
    while (( work )) ; do
        echo "child/execute[$count]=$(( count * 3 ))"
        (( ++count ))
        sleep 3
    done
    echo 'child/end/loop=1'
    exit 0
fi


function description()
{
    cat <<EOF
--help; display instructions on using this program
--path=[<directory>]; passed on server command line but ignored by unit tests
--verbose,-v,--debug; output debugging information
EOF
}

function usage()
{
    cat >&2 <<EOF

Test that the stdout.log does not dissapear before the test is complete.

Usage:
    cat input | ./test 

Options:
EOF

    description | sed 's/^/    /g' >&2
    exit
}

# ------------------
# MAIN
# ------------------
function message_() { echo "$1: $@" >&2; }
function error_() { message_ "$trim_name" $@ ;  }
function die_() { error_ $@ ; exit 1 ; }

declare -r trim_name="$( dirname ${0#*/test/} )"
declare -r full_dir_name="$( dirname $( readlink -f "$0" ) )"
declare -r scriptname=$( basename $0 )
name="$trim_name"

declare options_verbose=''

source $( type -p comma-application-util ) 2>/dev/null || { echo "$scriptname: cannot source 'comma-application-util'" >&2; exit 1; }

if (( $( comma_options_has --help $@ ) || $( comma_options_has -h $@ ) )) ; then usage ; fi
description | comma-options-validate "$@" || die_ "invalid command line options in $name"
comma_path_value_to_var --prefix=options < <( description | comma-options-to-name-value "$@" )

mkdir -p output || die_ "Could not create 'output' directory"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
echo 'main/start=1'
$0 --operate-as-child &
pid=$!
sleep 7
echo 'main/slept=1'
kill -TERM $pid
sleep 1
# if not for this wait, stdout.log is garbled
wait
echo 'main/end=1'
