#!/bin/bash

scriptname=$( basename "$0" )

source $( which comma-process-util ) || { echo "$scriptname: cannot source 'comma-process-util'" >&2; exit 1; }

output_dir="output"
temp_dir="$output_dir/temp"

rm -rf "$temp_dir" || exit 1
mkdir -p "$temp_dir" || { echo "$scriptname: cannot create directory '$temp_dir'" >&2; exit 1; }
fifo="$temp_dir/pipe"
trap "sleep 1; rm -f \"$fifo\"" EXIT
mkfifo "$fifo" || { echo "$scriptname: cannot create named pipe '$fifo'" >&2; exit 1; }

function handler()
{
    trap '' INT HUP TERM PIPE USR1
    builtin echo "handler/signal=$1"
    pkill -P $BASHPID
    wait
    trap - INT HUP TERM PIPE USR1
    # if a signal arrives before we kill ourselves (next line), the function may be
    # killed by a wrong signal and the test would fail; however, such double-signals
    # shall happen only when tests are terminated (^C) at exactly this moment, and therefore,
    # cannot pass anyway
    builtin kill -$1 $BASHPID
}
export -f handler

function runme()
{
    trap 'handler TERM' TERM
    trap 'handler INT'  INT
    trap 'handler HUP'  HUP
    trap 'handler PIPE' PIPE
    trap 'handler USR1' USR1
    sleep 100 &
    wait
}
export -f runme

function toplevel()
{
    local variable=$1
    local verbose=$2
    local signal=$3

    local args=
    [[ "$variable" == "default" ]] || args+=" --signature-variable=$variable"
    [[ "$verbose" == "verbose" ]] && args+=" --verbose"
    comma_process_exec_and_validate $args "$fifo" bash -c runme || { echo "$scriptname: fatal system error, wrong background PID" >&2; exit 1; }
    local rv=$?
    background_pid=$!
    echo "comma_process_exec_and_validate/status=$rv"

    sleep 10 # to allow exec to proceed

    args=
    [[ "$verbose" == "verbose" ]] && args+=" --verbose"
    [[ "$signal" == "TERM" ]] || args=" --signal=$signal"
    local signature="$comma_process_child_signature"
    [[ "$variable" == "default" ]] || eval "signature=\$$variable"

    comma_process_kill $args "$background_pid" "$signature"
    echo "comma_process_kill/status=$?"

    wait $background_pid
    echo "background/status=$?"
}

echo "sigterm/status=$(( 128 + $( kill -l TERM ) ))"
echo "sigusr1/status=$(( 128 + $( kill -l USR1 ) ))"

for variable in "default" "mysignature" ; do
    for verbosity in "quiet" "verbose" ; do
        for signal in "TERM" "USR1" ; do
            toplevel "$variable" "$verbosity" "$signal" | sed "s@^@$variable/$verbosity/$signal/@"
        done
    done
done
